

[logging]
    # increase for more info about the node. May reduce your node ability to keep up with the network
    level = 2

[api]
    # max number of future periods considered during requests
    draw_lookahead_period_count = 10
    # where to send admin level requests (node management)
    bind_private = "127.0.0.1:33034"
    # where to send public requests (get data, send operation)
    bind_public = "0.0.0.0:33035"
    # max number items accepted
    max_arguments = 128

[execution]
    # path to the initial sequential balance ledger
    initial_sce_ledger_path = "base_config/initial_sce_ledger.json"

[consensus]
    # max number of previously discarded blocks kept in RAM
    max_discarded_blocks = 100
    # if a block  is future_block_processing_max_periods periods in the future, it is just discarded
    future_block_processing_max_periods = 100
    # max number of blocks in the future kept in RAM
    max_future_processing_blocks = 400
    # max number of blocks waiting for dependencies
    max_dependency_blocks = 2048
    # number of final periods that must be kept at all time (increse to more resilience to short network disconnections)
    force_keep_final_periods = 20

    # max number of time the node tries to fill up a block before producing it
    max_operations_fill_attempts = 102400
    # number of operation to include in a block
    operation_batch_size = 1024

    # path to the cold sored ledger
    ledger_path = "storage/ledger"
    # size of the ledger kept in cache
    ledger_cache_capacity = 1048576
    # [optionnal] the ledger is saved on disk every ledger_flush_interval
    ledger_flush_interval = 10000
    # wether to overwrite the ledger at start
    ledger_reset_at_startup = true
    # path to the initial ledger
    initial_ledger_path = "base_config/initial_ledger.json"

    # max millis to wait while sending an event before dropping it
    max_send_wait = 500
    # useless blocks are pruned every block_db_prune_interval ms
    block_db_prune_interval = 5000

    # path to the initial roll distribution
    initial_rolls_path = "base_config/initial_rolls.json"
    # number of cached cycle for proof of stake seed initialization
    pos_draw_cached_cycles = 10

    # path to your staking private keys (not encrypted)
    staking_keys_path = "config/staking_keys.json"
    # considered timespan for stats info
    stats_timespan = 60000
    # max number of item returned per query
    max_item_return_count = 100

[protocol]
    # timeout after which without answer a hanshake is ended
    message_timeout = 5000
    # timeout after whick we consider a node does not have the block we asked for
    ask_block_timeout = 10000
    # max number for the local vision of what blocks a node knows
    max_node_known_blocks_size = 1024
    # max number for the local vision of what blocks a node wants
    max_node_wanted_blocks_size = 1024
    # max number of blocks we can asked per node
    max_simultaneous_ask_blocks_per_node = 2048
    # max millis to wait while sending an event before dropping it
    max_send_wait = 500
    # max number for the local vision of what operations a node knows
    max_known_ops_size = 10024
    # max number for the local vision of what endorsements a node knows about
    max_known_endorsements_size = 1024

[network]
    # where to listen for communication
    bind = "[::]:31244"
    # port used by protocol
    protocol_port = 31244
    # millis spent waiting for a respone
    connect_timeout = 3000
    # connection attempt to avaible peers every wakeup_interval millis
    wakeup_interval = 5000
    # path to the cold stored peers
    peers_file = "storage/peers.json"
    # path to the initial peer file
    initial_peers_file = "base_config/initial_peers.json"
    # target number of connection to a bootstrap node, once the bootstrap succeeded
    target_bootstrap_connections = 1
    # max number of connection attempts to bootstrap nodes, once the bootstrap succeeded
    max_out_bootstrap_connection_attempts = 1
    # target number of non bootstrap out connections
    target_out_nonbootstrap_connections = 10
    # max number of in non bootstrap connections
    max_in_nonbootstrap_connections = 15
    # max number of in connections per ip
    max_in_connections_per_ip = 5
    # max number of out non bootstrap connection attempts
    max_out_nonbootstrap_connection_attempts = 10
    # max number of stored idle peers
    max_idle_peers = 10000
    # max number of stored banned peers
    max_banned_peers = 100
    # max number of advertized peers
    max_advertise_length = 10000
    # peers are cold stored every peers_file_dump_interval millis
    peers_file_dump_interval = 10000
    # max size of sent messages
    max_message_size = 1048576000
    # after message_timeout millis we are no longer waiting on handshake message
    message_timeout = 5000
    # Every ask_peer_list_interval in millis we ask every one for its advertisable peers list.
    ask_peer_list_interval = 30000
    # path to the node private key (not the staking key)
    private_key_file = "config/node_privkey.key"
    # max number of asked blocks per message
    max_ask_blocks_per_message = 128
    # max number of operation per message
    max_operations_per_message = 1024
    # max number of endorsements per message
    max_endorsements_per_message = 1024
    # max millis to wait while sending an event before dropping it
    max_send_wait = 500
    # we forget we banned a node after ban_timeout
    ban_timeout = 3600000

[bootstrap]
    # list of bootstrap (ip, public key)
    bootstrap_list = [
        ["149.202.86.103:31245", "5GcSNukkKePWpNSjx9STyoEZniJAN4U4EUzdsQyqhuP3WYf6nj"],
        ["149.202.89.125:31245", "5wDwi2GYPniGLzpDfKjXJrmHV3p1rLRmm4bQ9TUWNVkpYmd4Zm"],
        ["158.69.120.215:31245", "5QbsTjSoKzYc8uBbwPCap392CoMQfZ2jviyq492LZPpijctb9c"],
        ["158.69.23.120:31245", "8139kbee951YJdwK99odM7e6V3eW7XShCfX5E2ovG3b9qxqqrq"]
    ]
    # [optionnal] for bootstrap servers to port people will bootstrap from
    bind = "[::]:31245"
    # timeout to establish a bootstrap connection
    connect_timeout = 15000
    # delay before an other bootsrap attempt
    retry_delay = 5000
    # if ping is too high bootstrap will be inturrupted
    max_ping = 10000
    # after read timeout millis, we stop reading
    read_timeout = 10000
    # after write_timeout millis, we stop writing
    write_timeout = 10000
    # if enabled, time will be synchronized on the server time
    enable_clock_synchronization = false
    # [server] data is kept for cache duration millis
    cache_duration = 15000
    # max number of simulataneous bootstraps for server
    max_simultaneous_bootstraps = 2
    # max size of recently bootstraped ips
    ip_list_max_size = 10000
    # after a botstrap attemp, a peer must wait per_ip_min_interval millis
    per_ip_min_interval = 300000

[pool]
    # max number of operation kept per thread
    max_pool_size_per_thread = 100000
    # if an operation is too much in the future it will be ignored
    max_operation_future_validity_start_periods = 100
    # max number of endorsement kept
    max_endorsement_count = 10000
    # max number of item returned per query
    max_item_return_count = 100
